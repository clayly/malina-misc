import proguard.gradle.ProGuardTask

buildscript {
    repositories {
        flatDir dirs: 'libs/proguard/lib'
    }
    dependencies {
        classpath ':proguard'
    }
}

plugins {
    id 'java'
    id 'application'
}

String jarsDir         = 'build/libs/'
String tmpJarShortName = 'test-audio-tmp.jar'
String jarShortName    = 'test-audio.jar'
String tmpJarFullName  = "${jarsDir}${tmpJarShortName}"
String jarFullName     = "${jarsDir}${jarShortName}"

repositories {
}

dependencies {
}

application {
    mainClassName = 'test.audio.App'
}

jar {
    manifest {
        attributes(
                'Main-Class': application.mainClassName
        )
    }
    archiveFileName = tmpJarShortName
}

task zvaJar(type: ProGuardTask) {
    dependsOn jar
    injars tmpJarFullName
    outjars jarFullName
    doLast {
        delete tmpJarFullName
    }
    if (System.getProperty('java.version').startsWith('1.')) {
        libraryjars "${System.getProperty('java.home')}/lib/rt.jar"
    } else {
        libraryjars "${System.getProperty('java.home')}/jmods/java.base.jmod", jarfilter: '!**.jar', filter: '!module-info.class'
    }
    printmapping "${jarsDir}obfuscation.map"
    renamesourcefileattribute 'SourceFile'
    keepattributes 'SourceFile,LineNumberTable'
    keepattributes '*Annotation*'
    keepclasseswithmembers 'public class * { \
        public static void main(java.lang.String[]); \
    }'
    keepclasseswithmembernames includedescriptorclasses:true, 'class * { \
        native <methods>; \
    }'
    keepclassmembers allowoptimization: true, 'enum * { \
        public static **[] values(); \
        public static ** valueOf(java.lang.String); \
    }'
}