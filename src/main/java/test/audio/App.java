/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package test.audio;

import javax.sound.sampled.*;
import java.util.Arrays;
import java.util.Locale;

public class App {

    public static void main(String[] args) {
        Mixer.Info[] mixerInfo = AudioSystem.getMixerInfo();
        for (int i = 0; i < mixerInfo.length; ++i) {
            Mixer.Info info = mixerInfo[i];
            System.out.println();
            System.out.println(String.format(Locale.US,
                    "====== MIXER INFO num: %02d ====== \ndescr: <%s> \nname: <%s> \nvend: <%s> \nver: <%s>",
                    i,
                    info.getDescription(),
                    info.getName(),
                    info.getVendor(),
                    info.getVersion()
            ));
            Mixer mixer = AudioSystem.getMixer(info);
            Line.Info[] srcLinesInfo = mixer.getSourceLineInfo();
            System.out.println("srcLinesInfo cnt: " + srcLinesInfo.length);
            for (int i1 = 0; i1 < srcLinesInfo.length; i1++) {
                System.out.println(String.format(Locale.US,
                        "srcLineInfo num: %02d srcLineInfo: <%s>",
                        i1, srcLinesInfo[i1].toString()
                ));
            }
            Line.Info[] dstLinesInfo = mixer.getTargetLineInfo();
            System.out.println("dstLinesInfo cnt: " + dstLinesInfo.length);
            for (int i1 = 0; i1 < dstLinesInfo.length; i1++) {
                System.out.println(String.format(Locale.US,
                        "dstLineInfo num: %02d dstLineInfo: <%s>",
                        i1, dstLinesInfo[i1].toString()
                ));
            }
            TargetDataLine dst = null;
            SourceDataLine src = null;
            AudioFormat dstFormat = audioFormat();
            AudioFormat srcFormat = audioFormat();
            try {
                dst = AudioSystem.getTargetDataLine(dstFormat, info);
                System.out.println("dstDataLine OK " + dst.getLineInfo());
            } catch (Exception e) {
                e.printStackTrace();
            }
            try {
                src = AudioSystem.getSourceDataLine(srcFormat, info);
                System.out.println("srcDataLine OK " + src.getLineInfo());
            } catch (Exception e) {
                e.printStackTrace();
            }
            loopBack(dst, dstFormat, src, srcFormat);
            System.out.println("\n\n");
        }
    }

    static private final long CHECK_PERIOD = 10000;
    static private final int READ_FACTOR = 4000;
    static private final int READ_SLICE = 30;

    private static void loopBack(TargetDataLine dst, AudioFormat dstFormat, SourceDataLine src, AudioFormat srcFormat) {
        if (dst == null || src == null)
            return;
        int frameSize = dstFormat.getFrameSize();
        int toRead = frameSize * READ_FACTOR;
        dst.addLineListener(event -> System.out.println("dst: " + event.toString()));
        src.addLineListener(event -> System.out.println("src: " + event.toString()));
        try {
            dst.open(dstFormat);
            src.open(srcFormat);
            dst.start();
            src.start();
            long startTs = System.currentTimeMillis();
            while (System.currentTimeMillis() - startTs < CHECK_PERIOD) {
                byte[] readData = new byte[toRead];
                boolean isRead = false;
                int readCnt = dst.read(readData, 0, toRead);
                if (readCnt == 0)
                    continue;
                for (byte datum : readData) {
                    if (datum != 0) {
                        isRead = true;
                        break;
                    }
                }
                if (!isRead)
                    continue;
                src.write(readData, 0, toRead);
                byte[] readSlice = new byte[READ_SLICE];
                System.arraycopy(readData, 0, readSlice, 0, readSlice.length);
                System.out.println("read and written: " + readData.length + " slice: " + Arrays.toString(readSlice));
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            dst.close();
            src.close();
        }
    }

    private static AudioFormat audioFormat() {
        float sampleRate = 8000.0F;
        int sampleSizeInBits = 16;
        int channels = 2;
        boolean signed = true;
        boolean bigEndian = false;
        return new AudioFormat(sampleRate, sampleSizeInBits, channels, signed, bigEndian);
    }

}
